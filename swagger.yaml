openapi: 3.0.0
info:
  title: Tutoring Assistant OpenAPI спецификация
  version: 0.0.1
servers:
  - url: http://localhost:8081
    description: Dev server
paths:
  /registration:
    post:
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Registration"
      responses:
        '201':
          description: Успешный ответ с созданным пользователем
          content:
            application/json:
              schema:
                type: object
                required:
                  - text
                properties:
                  text:
                    type: string
                    example: teacher@gmail.com
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /auth/login:
    post:
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: Вход успешно выполнен
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                properties:
                  accessToken:
                    type: string
                    example: eyJh...
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /student/teachers:
    get:
      summary: Метод получения репетиторов ученика
      security:
        - bearerAuth: []
      tags: 
        - Student
      responses:
        '200':
          description: Успешный ответ со списком репетиторов
          content:
            application/json:
              schema:
                type: object
                properties:
                  teachers:
                    type: array
                    items:
                      type: object
                      properties:
                        teacherId:
                          type: integer
                          example: 1
                        user:
                          $ref: "#/components/schemas/User"
                        subjects:
                          type: string
                          example: матрусанг
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /profile:
    get:
      summary: Метод получения профиля текущего пользователя
      security:
        - bearerAuth: []
      tags:
        - Profile
      responses:
        '200':
          description: Успешный ответ с информацией о пользователе
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /teacher/students:
    get:
      summary: Метод получения учеников репититора
      security:
        - bearerAuth: []
      tags: 
        - Teacher
      responses:
        '200':
          description: Успешный ответ со списком учеников
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Students"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /teacher/get/student/{student_id}:
    get:
      summary: Метод получения ученика по идентификатору
      security:
        - bearerAuth: []
      tags:
        - Teacher
      parameters:
        - name: student_id
          in: path
          required: true
          description: Идентификатор ученика
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Успешный ответ с информацией о студенте
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /teacher/add/student:
    post:
      summary: Метод добавления нового ученика для учителя
      security:
        - bearerAuth: []
      tags:
        - Teacher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: student@gmail.com
      responses:
        '200':
          description: Успешный ответ с информацией о студенте
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Students"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /teacher/delete/student/{student_id}:
    delete:
      summary: Метод удаления ученика у учителя
      security:
        - bearerAuth: []
      tags:
        - Teacher
      parameters:
        - name: student_id
          in: path
          required: true
          description: Идентификатор ученика
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Успешное удаление
          content:
            application/json: {}
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /myevents:
    get:
      summary: Метод получения событий
      security:
        - bearerAuth: []
      tags: 
        - Events
      responses:
        '200':
          description: Успешный ответ со списком событий
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /myteacher/{teacher_id}/events:
    get:
      summary: Метод получения событий определённого учителя ученика
      security:
        - bearerAuth: []
      tags:
        - Student
      parameters:
        - name: teacher_id
          in: path
          required: true
          description: Идентификатор учителя
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: Успешный ответ со списком событий
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /mystudent/{student_id}/events:
    get:
      summary: Метод получения событий определённого ученика учителя
      security:
        - bearerAuth: []
      tags:
        - Teacher
      parameters:
        - name: student_id
          in: path
          required: true
          description: Идентификатор ученика
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: Успешный ответ со списком событий
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /addevent:
    post:
      summary: метод добавления события
      security:
        - bearerAuth: []
      tags: 
        - Events      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - date_created
                - name
              properties:
                date:
                  type: string
                  format: 2024-12-26T15:00:00
                  example: 2024-12-26T15:00:00
                date_created:
                  type: string
                  format: 2024-12-26T15:00:00
                  example: 2024-12-26T15:00:00
                name:
                  type: string
                  example: напоминание
                getingPersonId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Успешный ответ с информацией о событии
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /delete/event/{event_id}:
    delete:
      summary: Метод удаления события
      security:
        - bearerAuth: []
      tags:
        - Events
      parameters:
        - name: event_id
          in: path
          required: true
          description: Идентификатор события
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Успешное удаление
          content:
            application/json: {}
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /update/event:
    put:
      summary: Метод обновления события
      security:
        - bearerAuth: []
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - event_id
                - date
                - date_created
                - name
                - description
              properties:
                event_id:
                  type: integer
                  example: 1
                date:
                  type: string
                  format: 2024-12-26T15:00:00
                  example: 2024-12-26T15:00:00
                date_created:
                  type: string
                  format: 2024-12-26T15:00:00
                  example: 2024-12-26T15:00:00
                name:
                  type: string
                  example: напоминание
                description:
                  type: string
                  example: сходить на занятие
                getingPersonId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Успешное обновление
          content:
            application/json: {}
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 17
        email:
          type: string
          example: teacher@gmail.com
        firstName:
          type: string
          example: Игорь
        lastName:
          type: string
          example: Игорев
        role:
          type: string
          example: ROLE_TEACHER
        extra_info:
          type: string
          example: Репетитор со стажем 3 года...
          
    Student:
      type: object
      required:
        - studentId
      properties:
        studentId: 
          type: integer
          example: 1
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            email:
              type: string
              example: igor@gmail.com
            firstName:
              type: string
              example: Игорь
            lastName:
              type: string
              example: Игоревич
            role:
              type: string
              example: ROLE_STUDENT
            extraInfo:
              type: string
              example: обучается математике
          
    Students:
      type: object
      properties:
        students:
          type: array
          items:
            $ref: "#/components/schemas/Student"
        
    Event:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: "#/components/schemas/User"
        date:
          type: string
          format: 2024-12-26T15:00:00
          example: 2024-12-26T15:00:00
        description:
          type: string
          example: сдача дз
        name:
          type: string
          example: напоминалка
        date_created:
          type: string
          format: 2024-12-26T15:00:00
          example: 2024-12-26T15:00:00
        update_at:
          type: string
          format: 2024-12-26T15:00:00
          example: 2024-12-26T15:00:00
        folowed_user:
          $ref: "#/components/schemas/User"
        
    Events:
      type: object
      properties:
        ownerEvents:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        followerEvents:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        
    Error:
      type: object
      required: 
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
          
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: teacher@gmail.com
        password:
          type: string
          example: 12345
          
    Registration:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          example: teacher@gmail.com
        password:
          type: string
          example: 12345
        role:
          type: string
          example: ROLE_TEACHER
        
